------------------------------------------------
chapter 01 파이썬 시작하기
------------------------------------------------

01-1 파이썬을 하기 전에 읽는 아주 간단할 설명

3가지 키워드로 정리하는 핵심 포인트
- 컴퓨터 프로그램(Computer Program)
  : 컴퓨터가 무엇을 해야 할지 미리 작성한 진행 계획을 말한다.
- 소스 코드
  : 프로그래밍 언어로 사람이 쉽게 읽고 이해할 수 있도록 만든 코드이다.
- 파이썬 특징
  (장점)
  1) 배우기 쉽다. 2) 다양한 분야에서 활용된다.
  3) 대부분의 운영체제에서 동일하게 사용된다.
  (단점) C언어 대비 느리다.

------------------------------------------------

01-2 파이썬을 배우기 위해 준비해야 할 것들

1) 파이썬 설치(https://www.python.org)
	1-2) D2Coding 폰트 또는 나눔고딕 코딩 글꼴 설치
2) 비주얼 스튜디오 코드 설치(https://code.visualstudio.com)

4가지 키워드로 정리하는 핵심 포인트
- 파이썬을 하려면 파이썬 코드를 입력할 수 있는 텍스트 에디터와
  파이썬 코드를 실행할 수 있는 도구인 파있너 인터프리터가 필요하다.
- 파이썬 프롬프트라 불리는 >>> 에 코드를 입력하면 바로 실행결과를 볼 수 있는데,
  이는 한 마디씩 주고받는 것처럼 대화한다고 해서
  인터렉티브 셸(대화형 셸)이라고 한다.
- 파이썬으로 작성한 파일은 해당 폴더의 명령 프롬프트에서 python 명령어로 실행할 수 있다.

------------------------------------------------

01-3 이 책에서 자주 나오는 파이썬 용어들

단어들이 모여서 구성되는 것
- 자료 : 10, 20, 30 등 : True False
- 연산자 : + - * / 등 : and or
- 식별자 : 사용자가 정의한 단어
- 키워드 : 창시자가 정의한 단어 : True False : and or

스네이크 케이스와 캐멀 케이스
: 식별자에는 공백을 사용할 수 없다. 따라서 방안이 제시되었다.
1) 스네이크 케이스(snake_case)
  : 단어 사이에 언더 바(_) 기호를 붙여 식별자를 만든다.
2) 캐멀 케이스(CamelCase)
  : 단어들의 첫 글자를 대문자로 만들어 식별자를 만든다.

5가지 키워드로 정리하는 핵심 포인트
-  표현식(Expression)
  : 파이썬에서는 값을 만들어 내는 간단한 코드를 표현식이라고 부른다.
- 키워드(Keyword)
  : 의미가 부여된 특별한 단어로, 사용자가 지정하는 이름에 사용하면 안된다.
- 식별자(Identifier)
  : 프로그래밍 언어에서 이름을 붙일 때 사용하는 단어이다.
- 주석(Comment)
  : 프로그램을 설명하는 데 사용하며, 프로그램에는 어떠한 영향도 주지 않는다.
  : # 으로 시작하면 주석처리된다.
- print()
  : 파이썬의 가장 기본적인 출력 방법으로 괄호 안에 출력하고 싶은 것을 입력해서 사용한다.

------------------------------------------------
chapter 02 자료형
------------------------------------------------

02-1 자료형과 문자열

문자 선택 연산자 [ 인덱싱 ]
문자열 범위 선택 연산자[ 슬라이싱 ]

IndexError(index out of range) 예외
  : 리스트/문자열의 수를 넘는 요소/글자를 선택할 때 발생한다.

5가지 키워드로 정리하는 핵심 포인트
- 자료의 형식을 자료형(data type)라고 한다.
- 문자의 나열을 문자열이라고 하는데, 문자열은 큰따옴표 혹은 작은 따옴표로 입력한다.
- 이스케이프 문자는 문자열 내부에서 특수한 기능을 수행하는 문자열을 말한다.
- 문자열 연산자에는 문자열 연결 연산자(+), 문자열 반복 연산자(*), 문자열 선택 연산자([]),
  문자열 범위 선택 연산자([:])가 있다.
	+ ex) [0:2] 연산자에서 범위는 0, 1 즉 뒤의 숫자를 포함하지 않는다.
- type()은 자료형을 확인하는 함수이며, len()은 문자열의 길이를 구현하는 함수이다.

------------------------------------------------

02-2 숫자

TypeError 예외
  : 서로 다른 자료를 연산하면 TypeError 예외가 발생한다.
    ex) 문자열 + 273

4가지 키워드로 끝내는 핵심 포인트
- 숫자 자료형에는 소수점이 없는 정수형과 소수점이 있는 실수형(부동 소수점)이 있다.
- 숫자 연산자에는 +, -, *, / 와 같은 사칙 연산자와
  //(정수 나누기 연산자), %(나머지 연산자), **(제곱 연산자)가 있다.
- 연산자에는 우선순위가 존재하는데
  1) 곱하기와 나누기가 우선이고
  2) 더하기와 빼기가 다음
  3) 잘 모를 떄는 괄호를 쳐서 나타낸다.

------------------------------------------------

02-3 변수와 입력

변수
  : 값을 저장할 때 사용하는 식별자
 ValueError 예외
  : 자료형을 변환할 때 '변환할 수 없는 것'을 변환하려고 하면 예외가 발생한다.
    1) 숫자가 아닌것을 숫자로 변환하려고 할 때
    2) 소수점이 있는 숫자 형식의 문자열을 int() 함수로 변환하려고 할 때

7가지 키워드로 정리하는 핵심 포인트
- 변수 선언
  : 변수를 생성하는 것을 의미한다. ex) 식별자 = 값
- 변수 할당
  : 변수에 값을 넣는 것
- input() 함수
  : 명령 프롬프트에서 사용자로부터 데이터를 입력받을 때 사용한다.
- int() 함수
  : 문자열 int 자료형으로 변환한다.
- float() 함수
  : 문자열을 float 자료형으로 변환한다.
- str() 함수
  : 숫자를 문자열로 변환한다.

  ------------------------------------------------
  
02-4 숫자와 문자열의 다양한 기능

문자열.함수(매개변수, 매개변수)
주어. 동사 (목적어, 목적어)

IndexError 예외
  : { } 기호의 개수가 format() 함수의 매개변수 개수보다 많으면 발생한다.

isOO() 함수
  : 문자열이 소문자, 알파벳, 숫자 로만구성되어 있는지 등을 확인할 때 사용한다.

7가지 키워드로 정리하는 핵심 포인트
- format() 함수
  : 숫자와 문자열을 다양한 형태로 출력할 수 있다.
- upper()와 lower() 함수
  : 문자열의 알파벳을 대문자 혹은 소문자로 변경한다.
- strip() 함수
  : 문자열 앙옆의 공백을 제거한다.
- find() 함수
  : 문자열 내부에 특정 문자가 어디에 위치하는지 찾을 때 사용한다.
- in 연산자
  : 문자열 내부에 어떤 문자열이 있는지 확인할 때 사용한다.
- split() 함수
  : 문자열을 특정한 문자열로 자를 때 사용한다.

------------------------------------------------
chapter 03 조건문

03-1 불 자료형과 if 조건문

4가지 키워드로 정리하는 핵심 포인트
- 불(boolean)
  : 파이썬의 기본 자료형으로 True(참)와 False(거짓)를 나타내는 값이다.
- 비교 연산자
  : 숫자 똔느 문자열에 적용하며, 대소를 비교하는 연산자이다.
- 논리 연산자
  : not, and, or 연산자가 있으며, 불을 만들 때 사용한다.
- if 조건문
  : 조건에 따라 코드를 실행하거나 실행하지 않게 만들고 싶을 때 사용하는 구문이다.

  ------------------------------------------------
  
03-2 if~else와 elif 구문

4가지 키워드로 정리하는 핵심 포인트
- else 구문
  : if 조건문 뒤에 사용하며, if 조건문의 조건이 거짓일 때 실행된다.
- elif 구문
  : if 조건문과 else 구문 사이에 입력하며,
  세 개 이상의 조건을 연결해서 사용할 때 적합하다.
  ※ 다른 언어에서의 else if문과 같다.
- pass 키워드
  : 프로그래밍의 전체 골격을 잡아놓고, 내부에 처리할 내용은 나중에 만들고자 할 때,
  pass 라는 키워드를 입력해 둔다.

------------------------------------------------
chapter 04 반복문
------------------------------------------------

04-1 리스트와 반복문

4가지 키워드로 정리하는 핵심 포인트
- 리스트(list)
  : 여러 가지 자료를 저장할 수 있는 자료형을 말한다.
    다른 언어와 다르게 여러 타입을 넣을 수 있다.
- 요소(element)
  : 리스트 내부에 있는 각각의 내용을 의미한다.
- 인덱스(index)
  : 리스트 내부에서 값의 위치를 의미한다.
- for 반복문
  : 특정 코드를 반복해서 실행할 때 사용하는 기본적인 구문이다.
    for 반복자 in 반복할 수 있는 것:
      코드

------------------------------------------------

04-2 딕셔너리와 반복문

3가지 키워드로 정리하는 핵심 포인트
- 딕셔너리(dictionary)
  : 키를 기반으로 여러 자료를 저장하는 자료형이다.
  변수 = {
    키 : 값,
    키 : 값,
  }
- 키(key)
  : 딕셔너리 내부에서 값에 접근할 때 사용하는 것이다.
- 값(value)
  : 딕셔너리 내부에 있는 각각의 내용을 의미한다.

------------------------------------------------

04-3 반복문과 while 반복문

반대로 출력하기
for i in reversed(반복할 것)

조건을 활용해서 반복을 사용해야 한다면
while 반복문을 상용하는 것이 좋다.

4가지 키워드로 정리하는 핵심 포인트
- 범위(range)
  : "정수"의 범위를 나타내는 값이다. range() 함수로 생성한다.
    range(시작, 끝, 단계)
    ex) list(range(0, 5, 1)) : [0,1,2,3,4]
- while 반복문
  : 조건식을 기반으로 특정 코드를 반복해서 실행할 때 사용하는 구문이다.
- break 키워드
  : 반복문을 벗어날 때 사용하는 구문이다.
- continue 키워드
  : 반복문의 현재 반복문을 생략할 때 사용하는 구문이다.

------------------------------------------------
